[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "multi-agent-framework"
version = "0.1.0"
description = "A flexible multi-agent framework for collaborative software development"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Multi-Agent Framework Contributors"},
]
keywords = ["multi-agent", "ai", "llm", "software-development", "automation"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Operating System :: OS Independent",
]

dependencies = [
    "anthropic>=0.34.0",
    "openai>=1.3.0",
    "google-generativeai>=0.3.0,<1.0.0",
    "python-dotenv>=1.0.0",
    "pathlib2>=2.3.0",
    "click>=8.0.0",
]

[project.urls]
"Homepage" = "https://github.com/micgo/maf-standalone"
"Bug Tracker" = "https://github.com/micgo/maf-standalone/issues"
"Documentation" = "https://github.com/micgo/maf-standalone/wiki"

[project.scripts]
maf = "multi_agent_framework.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
]
kafka = [
    "kafka-python>=2.0.0",
]

[tool.setuptools]
packages = ["multi_agent_framework"]

[tool.setuptools.package-data]
multi_agent_framework = ["*.md", "docs/*.md", "examples/*.py"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = "--verbose --cov=multi_agent_framework"

[tool.coverage.run]
source = ["multi_agent_framework"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@abstract",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"